# 1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа.
# Числа и знак операции вводятся пользователем.
# После выполнения вычисления программа не должна завершаться, а должна запрашивать новые данные для вычислений.
# Завершение программы должно выполняться при вводе символа '0' в качестве знака операции.
# Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'),
# то программа должна сообщать ему об ошибке и снова запрашивать знак операции.
# Также сообщать пользователю о невозможности деления на ноль, если он ввел 0 в качестве делителя

while True:
    a = input('Введите первое число: ')
    b = input('Введите второе число: ')
    c = input('Введите знак операци +, -, *, /, для выхода введите 0: ')
    if a.isdigit() and b.isdigit(): #Проверим являются ли введенные символы цифрами
        if c == '0':
            break
        elif c == '+':
            print(f'Сумма чисел: {int(a) + int(b)}')
        elif c == '-':
            print(f'Вычитание чисел: {int(a) - int(b)}')
        elif c == '/':
            if int(b) != 0:
                print(f'Деление чисел: {int(a) / int(b)}')
            else:
                print('Деление на ноль невозможно!')
        elif c == '*':
            print(f'Произведение чисел: {int(a) * int(b)}')
        else:
            print('Введены некорректные данные')
    else:
        print('Вводить нужно числа!')
print('Программа завершена!')

############################################

# 2. Посчитать четные и нечетные цифры введенного натурального числа.
# Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

a = input('Введите число: ')
even = 0 #Четные числа
odd = 0 #нечетные числа

for i in a:
    if i.isdigit(): #Проверим являются ли введенные символы цифрами
        if int(i) % 2 == 0:
            even += 1
        else:
            odd += 1
    else:
        print('Вводить нужно число')
        exit(0)
print(f'число {a} состоит из {even} четных цифр и {odd} нечетных цифр')

############################################

# 3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
# Например, если введено число 3486, то надо вывести число 6843

a = input('Введите число: ')

for i in a:
    if i.isdigit():
        text = a[::-1]
    else:
        print('Вводить нужно число')
        exit(0)

print(text)

############################################

# 4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
# Количество элементов (n) вводится с клавиатуры.

n = input('Введите количество элементов (n): ')

if n.isdigit():
    if int(n) > 0:
        res = 1 * ((-0.5) ** int(n) - 1) / (-0.5 - 1)
    else:
        print('Вводить нужно число и оно должно быть больше нуля')
        exit(0)
else:
    print('Вводить нужно число и оно должно быть больше нуля')
    exit(0)

print(res)

############################################

# 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно.
# Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.

first = 32
last = 127
res = ''
i = 0
n = first
while n <= last:
    res = res + chr(n) + ' - ' + str(n) + ','
    if (i+1) % 10 == 0:
        res = res + '\n'
    i += 1
    n += 1

for i, item in enumerate(range(first, last + 1)):
    if i % 10 == 0:
        print()
    print(f'{chr(item)} - {str(item)}', end='\t')

print()
print(res)

############################################

# 6. В программе генерируется случайное целое число от 0 до 100.
# Пользователь должен его отгадать не более чем за 10 попыток.
# После каждой неудачной попытки должно сообщаться больше или
# меньше введенное пользователем число, чем то, что загадано.
# Если за 10 попыток число не отгадано, то вывести загаданное число.

from random import randint

numb = randint(0, 100)
attempts = 10
print(numb)
while attempts != 0:
    n = int(input('Отгадайте число от 0 до 100: '))
    if n >= 0 and n <= 100:
        if n == numb:
            print(f'Поздравляю, Вы угадали загаданное число {n}')
            exit(0)
        elif n > numb:
            attempts -= 1
            print(f'Введенное число больше загаданного, у Вас осталось {attempts} попыток')
        else:
            attempts -= 1
            print(f'Введенное число меньше загаданного, у Вас осталось {attempts} попыток')
    else:
        print('Введите число от 0 до 100!')

print(f'Вы проиграли, было загаданно число {numb}')

############################################

# 7. Напишите программу, доказывающую или проверяющую,
# что для множества натуральных чисел выполняется равенство:
# 1+2+...+n = n(n+1)/2, где n - любое натуральное число.

n = int(input('Введите любое натуральное число (n): '))

sum1 = 0
sum2 = n * (n + 1) // 2

if n > 0:
    while n > 0:
        sum1 += n
        n -= 1
    if sum1 == sum2:
        print(f'равенство: 1+2+...+n = n(n+1)/2 верно, \n {sum1} = {sum2}')
    else:
        print('что-то пошло не так')
else:
    print('Вводить нужно число больше нуля')

############################################

# 8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел.
# Количество вводимых чисел и цифра, которую необходимо посчитать, задаются вводом с клавиатуры.

n = input('Введите последовательность чисел: ')
m = input('Введите число, которое будем искать: ')

i = 0
for item in n:
    if item == m:
        i += 1

if i == 0:
    print(f'Введенное число {m} не встречается в последовательности {n}')
else:
    print(f'Введенное число {m} встречается {i} раз в последовательности {n}')

############################################

# 9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр.
# Вывести на экран это число и сумму его цифр.

n = input('Введите последовательность натуральных чисел чисел: ')
m = n.split(' ')
sum_m = 0
i = 0
for item in m[0]:
    sum_m += int(item)
res = m[0]
sum_n = 0

for item in m:
    sum_n = 0
    for item2 in str(item):
        sum_n += int(item2)
    if sum_n > sum_m:
        sum_m = sum_n
        res = item

print(f'Наибольшая сумма цифр {sum_m} числа {res}')

